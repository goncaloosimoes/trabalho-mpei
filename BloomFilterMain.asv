clear;
clc;

% Parâmetros do Bloom Filter
size = 1000000;      % Tamanho do vetor binário
hashCount = 2;       % Número de funções hash

% Criar o Bloom Filter
bloomFilter = InitializeBF(size);

% Carregar Dados
data = readtable('data_table.csv');

% Verificar integridade dos dados
requiredFields = {'age', 'gender'};
if ~all(ismember(requiredFields, data.Properties.VariableNames))
    error('As colunas necessárias estão ausentes no arquivo CSV.');
end

% Remover linhas com dados ausentes
data = rmmissing(data);

% Função auxiliar para conversão de dados para string
function str = toString(value)
    if ischar(value) || isstring(value)
        str = char(value); % Converter para string se necessário
    else
        str = num2str(value); % Converter número para string
    end
end

% Adicionar dados ao Bloom Filter
disp('Adicionando transações conhecidas ao Bloom Filter...');
tic; % Início do cronômetro
for i = 1:height(data)
    ageStr = toString(data.age{i});
    genderStr = toString(data.gender{i});
    transactionID = sprintf('%s%s%d', ageStr, genderStr, i);
    bloomFilter = addBF(bloomFilter, transactionID, hashCount);

    if mod(i, 1000) == 0
        fprintf('Adicionadas %d transações ao Bloom Filter...
', i);
    end
end
toc; % Fim do cronômetro
disp('Adição completa.');

% Salvar o Bloom Filter
save('bloomFilter.mat', 'bloomFilter');

% Verificar se novas transações são conhecidas ou suspeitas
newTransactions = {'transacao_1001', '2M188781', '2F188458', '2M123456', 'transacao_2000','5M30'};

disp('Verificando novas transações:');
for i = 1:length(newTransactions)
    transactionID = newTransactions{i};
    isPresent = checkBF(bloomFilter, transactionID, hashCount);

    resultMsg = 'NÃO é conhecida';
    if isPresent
        resultMsg = 'PODE ser conhecida (ou falso positivo)';
    end
    fprintf('A transação "%s" %s.
', transactionID, resultMsg);
end
